{"version":3,"file":"static/js/349.5e9ca1e6.chunk.js","mappings":"mJAMA,IANc,WACZ,OACE,uBAAG,0CAEN,C,mBCJD,IACMA,EAAU,CAACC,QAAS,CAACC,cAAe,+NAU1C,IARA,SAAoBC,GAChB,OAAOC,MAAM,GAAD,OAJC,+BAID,YAAgBD,GAASH,GAASK,MAAM,SAAAC,GAChD,OAAIA,EAASC,GAEND,EAASE,OAFQC,QAAQC,OAAOJ,EAASK,OAGnD,GACJ,C,oICRD,EAAwB,0BAAxB,EAA2D,2B,SC+B3D,EA7BmB,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACpB,GAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOV,EAAP,KAAcW,EAAd,KAUA,OACE,kBAAMC,SATa,SAAAC,GACnBA,EAAMC,iBACe,KAAjBd,EAAMe,SAEVN,EAAST,EAAMe,QACfJ,EAAS,IACV,EAGC,WACE,kBACEK,KAAK,QACLC,KAAK,OACLC,WAAS,EACTC,YAAY,cACZC,UAAWC,EACXC,MAAOtB,EACPuB,SAAU,SAAAC,GAAC,OAAIb,EAASa,EAAEC,OAAOH,MAAtB,KAEb,mBAAQL,KAAK,SAASG,UAAWC,EAAjC,SAA6C,aAKlD,EC7BD,EAA0B,wB,SCgB1B,EAdmB,SAAC,GAAgB,IAAdK,EAAa,EAAbA,OACdC,GAAWC,EAAAA,EAAAA,MAEXC,EAAaH,EAAOI,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAP,OAC5B,eAAaZ,UAAU,YAAvB,UACE,SAAC,KAAD,CAASa,GAAE,kBAAaF,GAAMG,MAAO,CAAEC,KAAMR,GAAYP,UAAU,OAAnE,SACGY,KAFID,EADmB,IAQ9B,OAAO,wBAAKF,GACb,ECgCD,EAtCe,WAAO,IAAD,EACnB,GAAwCO,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAA0B5B,EAAAA,EAAAA,UAAQ,UAAC2B,EAAaE,IAAI,iBAAlB,QAA+B,IAAjE,eAAOvC,EAAP,KAAcW,EAAd,KACA,GAAkCD,EAAAA,EAAAA,WAAS,GAA3C,eAAO8B,EAAP,KAAkBC,EAAlB,KACA,GAA0B/B,EAAAA,EAAAA,WAAS,GAAnC,eAAOgC,EAAP,KAAcC,EAAd,KACA,GAA4BjC,EAAAA,EAAAA,UAAS,IAArC,eAAOgB,EAAP,KAAekB,EAAf,MAEAC,EAAAA,EAAAA,YAAU,WACM,KAAV7C,IACFyC,GAAa,GACbE,GAAS,IACTG,EAAAA,EAAAA,GAAU,sBAAD,OAAuB9C,IAC7BE,MAAK,YAAkB,IAAf6C,EAAc,EAAdA,QACPH,GAAU,OAAIG,GACf,IACAC,OAAM,kBAAML,GAAS,EAAf,IACNM,SAAQ,kBAAMR,GAAa,EAAnB,IAEd,GAAE,CAACzC,IAOJ,OACE,iBAAKoB,UAAWC,EAAhB,WACE,SAAC,EAAD,CAAYZ,SAPK,SAAAyC,GACnBZ,EAAgB,CAAEa,OAAQD,IAC1BvC,EAASuC,EACV,IAKIV,IAAa,SAAC,IAAD,IACbE,IAAS,SAACU,EAAA,EAAD,IACT1B,EAAO2B,OAAS,IAAMX,IAAS,SAAC,EAAD,CAAYhB,OAAQA,IACjC,IAAlBA,EAAO2B,QAA0B,KAAVrD,IAAiB0C,IACvC,uBAAG,8CAIV,C","sources":["components/Error/Error.jsx","components/services.js","webpack://goit-react-hw-05-movies/./src/components/SearchForm/SearchForm.module.css?d6f1","components/SearchForm/SearchForm.jsx","webpack://goit-react-hw-05-movies/./src/pages/Movies/Movies.module.css?82ee","pages/Movies/MoviesList.jsx","pages/Movies/Movies.jsx"],"sourcesContent":["const Error = () => {\n  return (\n    <p>Oops, something went wrong. Try again!</p>\n  )\n}\n\nexport default Error","const BASE_URL = 'https://api.themoviedb.org/3';\nconst OPTIONS = {headers: {Authorization: 'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiIxZWIxOWFlZTJiNTU2ZTg3MmFlYjRkMTJmM2UzZDBlZiIsInN1YiI6IjY0NmY2NjQzMTdjNDQzMDBjMjI0OTMzZCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.nSQ1KLIUK97f2ypbV38GEeFR4HBt9RE_gR1cSa6SUjM'}}\n\nfunction fetchFunc (query) {\n    return fetch(`${BASE_URL}/${query}`, OPTIONS).then( response => {\n        if(!response.ok) return Promise.reject(response.status)\n        // console.log(response)\n        return response.json(); \n    })\n}\n\nexport default fetchFunc;\n\n","// extracted by mini-css-extract-plugin\nexport default {\"input\":\"SearchForm_input__k4ukm\",\"button\":\"SearchForm_button__76exa\"};","import React, { useState } from 'react';\r\nimport css from './SearchForm.module.css';\r\n\r\nconst SearchForm = ({ onSearch }) => {\r\n  const [query, setQuery] = useState('');\r\n\r\n  const handleSubmit = event => {\r\n    event.preventDefault();\r\n    if (query.trim() === '') return;\r\n\r\n    onSearch(query.trim());\r\n    setQuery('');\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit}>\r\n      <input\r\n        name=\"movie\"\r\n        type=\"text\"\r\n        autoFocus\r\n        placeholder=\"Movie title\"\r\n        className={css.input}\r\n        value={query}\r\n        onChange={e => setQuery(e.target.value)}\r\n      />\r\n      <button type=\"submit\" className={css.button}>\r\n        Search\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default SearchForm;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"movList\":\"Movies_movList__wD674\"};","import React from 'react';\r\nimport { NavLink, useLocation } from 'react-router-dom';\r\n\r\nconst MoviesList = ({ movies }) => {\r\n  const location = useLocation();\r\n\r\n  const moviesList = movies.map(({ id, title }) => (\r\n    <li key={id} className=\"list_item\">\r\n      <NavLink to={`/movies/${id}`} state={{ from: location }} className=\"link\">\r\n        {title}\r\n      </NavLink>\r\n    </li>\r\n  ));\r\n\r\n  return <ul>{moviesList}</ul>;\r\n};\r\n\r\nexport default MoviesList;\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useSearchParams } from 'react-router-dom';\r\nimport fetchFunc from 'components/services';\r\nimport Loading from 'components/Loader/Loader';\r\nimport Error from 'components/Error/Error';\r\nimport SearchForm from 'components/SearchForm/SearchForm';\r\nimport css from './Movies.module.css';\r\nimport MoviesList from './MoviesList';\r\n\r\nconst Movies = () => {\r\n  const [searchParams, setSearchParams] = useSearchParams();\r\n  const [query, setQuery] = useState(searchParams.get('search') ?? '');\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState(false);\r\n  const [movies, setMovies] = useState([]);\r\n\r\n  useEffect(() => {\r\n    if (query !== '') {\r\n      setIsLoading(true);\r\n      setError(false);\r\n      fetchFunc(`search/movie?query=${query}`)\r\n        .then(({ results }) => {\r\n          setMovies([...results]);\r\n        })\r\n        .catch(() => setError(true))\r\n        .finally(() => setIsLoading(false));\r\n    }\r\n  }, [query]);\r\n\r\n  const handleSearch = newQuery => {\r\n    setSearchParams({ search: newQuery });\r\n    setQuery(newQuery);\r\n  };\r\n\r\n  return (\r\n    <div className={css.movList}>\r\n      <SearchForm onSearch={handleSearch} />\r\n      {isLoading && <Loading />}\r\n      {error && <Error />}\r\n      {movies.length > 0 && !error && <MoviesList movies={movies} />}\r\n      {movies.length === 0 && query !== '' && !error && (\r\n        <p>We've found nothing. Try another query!</p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Movies;\r\n"],"names":["OPTIONS","headers","Authorization","query","fetch","then","response","ok","json","Promise","reject","status","onSearch","useState","setQuery","onSubmit","event","preventDefault","trim","name","type","autoFocus","placeholder","className","css","value","onChange","e","target","movies","location","useLocation","moviesList","map","id","title","to","state","from","useSearchParams","searchParams","setSearchParams","get","isLoading","setIsLoading","error","setError","setMovies","useEffect","fetchFunc","results","catch","finally","newQuery","search","Error","length"],"sourceRoot":""}