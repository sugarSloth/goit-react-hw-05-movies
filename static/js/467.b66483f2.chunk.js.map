{"version":3,"file":"static/js/467.b66483f2.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/pages/Movies/Movies.module.scss?c7a6","pages/Movies/Movies.jsx","tmdbApi/tmdb-api.js","../node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"searchbar\":\"Movies_searchbar__7vuf3\"};","import { Suspense, lazy, useEffect, useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { getMovies } from 'tmdbApi/tmdb-api';\nimport scss from './Movies.module.scss';\n\nconst Searchbar = lazy(() => import('../../components/Searchbar'));\nconst MoviesList = lazy(() => import('../../components/MoviesList'));\nconst Loader = lazy(() => import('../../components/Loader'));\n\nexport default function Movies() {\n  const [searchedMovies, setSearchedMovies] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('query') || '';\n\n  useEffect(() => {\n    setSearchedMovies([]);\n\n    const fetchMovies = async () => {\n      try {\n        const data = await getMovies(query);\n        if (data.results.length !== 0) {\n          const movies = data.results.map(({ id, poster_path, title }) => {\n            return { id, poster_path, title };\n          });\n          setSearchedMovies(movies);\n        } else {\n          alert(`Movies by your request \"${query}\" did not found`);\n        }\n      } catch (error) {\n        console.log(`Error in Movies page during getMovies: ${error}`);\n      }\n    };\n\n    if (query !== '') {\n      fetchMovies();\n    }\n  }, [query]);\n\n  const updateSearchParams = value => {\n    const searchString = value.searchString;\n    if (query !== searchString) {\n      setSearchParams({ query: searchString });\n    } else {\n      if (query !== '') {\n        alert(`You are actually looking at \"${value.searchString}\" pictures`);\n      }\n    }\n  };\n\n  return (\n    <>\n      <Searchbar className={scss.searchbar} onSubmit={updateSearchParams} />\n      <Suspense fallback={<Loader />}>\n        {searchedMovies.length !== 0 && <MoviesList movies={searchedMovies} />}\n      </Suspense>\n    </>\n  );\n}\n","const ORIGIN = 'https://api.themoviedb.org/3/';\nconst API_TOKEN =\n  'Bearer eyJhbGciOiJIUzI1NiJ9.eyJhdWQiOiJiODRhNTAzMjMxNWZiYTc1ZjI0MGI3NDVjYTdjYzBhZiIsInN1YiI6IjY0NzBiZWJlMzM2ZTAxMDBlODBjNTYyZCIsInNjb3BlcyI6WyJhcGlfcmVhZCJdLCJ2ZXJzaW9uIjoxfQ.f2kRYsL7gY4sDbVFKpKd_M1rnGrppV5NDL6eESs9EQU';\n\nconst urlParams = {\n  BASE_URL: 'https://image.tmdb.org/t/p/',\n  POSTER_SIZE: 'w500',\n  PHOTO_SIZE: 'w300',\n};\n\nconst options = {\n  method: 'GET',\n  headers: {\n    accept: 'application/json',\n    Authorization: API_TOKEN,\n  },\n};\n\nconst requestParameters = {\n  trending: {\n    pathname: 'trending/movie/day',\n    queries: { language: 'en-US' },\n  },\n  movie: {\n    pathname: 'search/movie',\n    queries: {\n      query: '',\n      include_adult: false,\n      language: 'en-US',\n      page: 1,\n    },\n  },\n  details: {\n    pathname: '',\n    queries: { language: 'en-US' },\n  },\n  cast: {\n    pathname: '',\n    queries: { language: 'en-US' },\n  },\n  reviews: {\n    pathname: '',\n    queries: { language: 'en-US', page: 1 },\n  },\n};\n\nasync function getTrending() {\n  const url = buildUrlString(requestParameters.trending);\n  try {\n    const response = await fetch(url, options);\n    return await response.json();\n  } catch (err) {\n    console.error(err);\n  }\n}\n\nasync function getMovies(query) {\n  requestParameters.movie.queries.query = query;\n  const url = buildUrlString(requestParameters.movie);\n  try {\n    const response = await fetch(url, options);\n    return await response.json();\n  } catch (err) {\n    console.error(err);\n  }\n}\n\nasync function getDetails(id) {\n  requestParameters.details.pathname = `movie/${id}`;\n  const url = buildUrlString(requestParameters.details);\n  try {\n    const response = await fetch(url, options);\n    return await response.json();\n  } catch (err) {\n    console.error(err);\n  }\n}\n\nasync function getCast(id) {\n  requestParameters.cast.pathname = `movie/${id}/credits`;\n  const url = buildUrlString(requestParameters.cast);\n  try {\n    const response = await fetch(url, options);\n    return await response.json();\n  } catch (err) {\n    console.error(err);\n  }\n}\n\nasync function getReviews(id) {\n  requestParameters.reviews.pathname = `movie/${id}/reviews`;\n  const url = buildUrlString(requestParameters.reviews);\n  try {\n    const response = await fetch(url, options);\n    return await response.json();\n  } catch (err) {\n    console.error(err);\n  }\n}\n\nfunction buildUrlString(requestParams) {\n  const { pathname, queries } = requestParams;\n  const queryString = buildQueryString(queries);\n  return `${ORIGIN}${pathname}?${queryString}`;\n}\n\nfunction buildQueryString(queries) {\n  return Object.entries(queries)\n    .map(([key, value]) => `${key}=${value}`)\n    .join('&');\n}\n\nexport { getTrending, getMovies, getDetails, getCast, getReviews, urlParams };\n","function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {\n  try {\n    var info = gen[key](arg);\n    var value = info.value;\n  } catch (error) {\n    reject(error);\n    return;\n  }\n\n  if (info.done) {\n    resolve(value);\n  } else {\n    Promise.resolve(value).then(_next, _throw);\n  }\n}\n\nexport default function _asyncToGenerator(fn) {\n  return function () {\n    var self = this,\n        args = arguments;\n    return new Promise(function (resolve, reject) {\n      var gen = fn.apply(self, args);\n\n      function _next(value) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value);\n      }\n\n      function _throw(err) {\n        asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err);\n      }\n\n      _next(undefined);\n    });\n  };\n}"],"names":["Searchbar","lazy","MoviesList","Loader","Movies","useState","searchedMovies","setSearchedMovies","useSearchParams","searchParams","setSearchParams","query","get","useEffect","fetchMovies","getMovies","data","results","length","movies","map","id","poster_path","title","alert","console","log","className","scss","onSubmit","value","searchString","Suspense","fallback","urlParams","BASE_URL","POSTER_SIZE","PHOTO_SIZE","options","method","headers","accept","Authorization","requestParameters","trending","pathname","queries","language","movie","include_adult","page","details","cast","reviews","getTrending","url","buildUrlString","fetch","response","json","error","getDetails","getCast","getReviews","requestParams","queryString","Object","entries","key","join","buildQueryString","asyncGeneratorStep","gen","resolve","reject","_next","_throw","arg","info","done","Promise","then","_asyncToGenerator","fn","self","this","args","arguments","apply","err","undefined"],"sourceRoot":""}